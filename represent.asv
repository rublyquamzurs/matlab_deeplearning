function [embedding]=represent(X,Y,Loc,K,L,varargin)
% paras.num_classes = 13;
% paras.embedding_size = 1024;
% paras.max_epoch = 500;
% paras.learning_rate = 0.001;


inputs = X';
labels = Y';
locations = Loc';
transform_matrix = L;

layers = [
    imageInputLayer([28 28 1])
    
    convolution2dLayer(3,16,'Padding',1)
    batchNormalizationLayer
    reluLayer
    
    maxPooling2dLayer(2,'Stride',2)
    
    convolution2dLayer(3,32,'Padding',1)
    batchNormalizationLayer
    reluLayer
    
    maxPooling2dLayer(2,'Stride',2)
    
    convolution2dLayer(3,64,'Padding',1)
    batchNormalizationLayer
    reluLayer
    
    fullyConnectedLayer(10)
    batchNormalizationLayer
    TriplteLossLayer];


options = trainingOptions('sgdm',...
    'MaxEpochs',3, ...
    'ValidationData',valDigitData,...
    'ValidationFrequency',30,...
    'Verbose',false,...
    'Plots','training-progress');

net = trainNetwork(trainDigitData,layers,options);
predict
predictedLabels = classify(net,valDigitData);
valLabels = valDigitData.Labels;

accuracy = sum(predictedLabels == valLabels)/numel(valLabels);

end


function select_triplets(embeddings, paras)
%% Select the triplets for training

    max_trips = 0
    triplets = []
    for i, anchors in enumerate(vectors_index):
        a_num = np.arange(anchors.shape[0])
        one_floor_arg = bf_gallery[bf_mark[i]].rss
        one_loc = sample_mul_all[anchors[:, 0]]
        negative_cannot_select = np.where(label_dist[anchors[:, 0]] < 400)
        candidate_loc = positive_points_candidate[i]
        candidate_rss = [vectors_index[v] for v in candidate_loc]
        for p_loc in candidate_rss:
            pos_m = one_loc[:, p_loc[:, 0]]
            pos_idx_av = np.argmax(pos_m, axis=1)
            pos_idx_v = [pos_m[m, pos_idx_av[m]] for m in a_num]
            one_loc[:, p_loc[:, 0]] = np.inf
            neg_dists_m = one_loc - np.reshape(pos_idx_v, (-1, 1))
            neg_dists_m[negative_cannot_select] = np.inf
            neg_dists_mi = neg_dists_m[:, one_floor_arg]
            neg_av = np.argmin(neg_dists_mi, axis=1)
            neg_v = [neg_dists_mi[m, neg_av[m]] for m in a_num]
            for j, diff in enumerate(neg_v):
                max_trips += 1
                if diff < alpha:
                    triplets.append([anchors[j, 0], p_loc[pos_idx_av[j], 0], one_floor_arg[neg_av[j]]])

    np.random.shuffle(triplets)

end

function train(net, layers, paras, traindata)

embeddings = net(traindata.data, layers, paras);

triplets = select_triplets(embeddings, paras)

for i = 0:minibatch
    loss = triplet_loss()
    applygradiant(layers)

end

end


function evaluate(net, layers, paras, validationdata)
end